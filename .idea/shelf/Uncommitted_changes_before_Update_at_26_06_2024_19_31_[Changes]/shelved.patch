Index: src/main/java/org/example/myversion/client/GUI/Controllers/SetParameterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/myversion/client/GUI/Controllers/SetParameterController.java b/src/main/java/org/example/myversion/client/GUI/Controllers/SetParameterController.java
new file mode 100644
--- /dev/null	(date 1719408302927)
+++ b/src/main/java/org/example/myversion/client/GUI/Controllers/SetParameterController.java	(date 1719408302927)
@@ -0,0 +1,50 @@
+package org.example.myversion.client.GUI.Controllers;
+
+import javafx.application.Platform;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.TextField;
+import org.example.myversion.client.GUI.GUIController;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+
+public class SetParameterController extends GUIController{
+    @FXML
+    TextField ipAddress;
+    @FXML
+    ComboBox<String> connectionType;
+    @FXML
+    Button send;
+
+    public void initialize(){
+        send.setOnMouseClicked(event -> sendParameters());
+    }
+
+    public void setParameters(){
+        Platform.runLater(() -> {
+            try {
+                URL fxmlLocation = (new File("src/main/resources/org/example/myversion/FXML/SetParameter.fxml")).toURI().toURL();
+                FXMLLoader loader = new FXMLLoader(fxmlLocation);
+                loader.setController(this);
+                Parent root = loader.load();
+                connectionType.getItems().addAll("tcp", "rmi");
+                gui.getStage().setTitle("Codex Naturalis");
+                gui.getStage().setScene(new Scene(root));
+                gui.getStage().show();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+
+    public void sendParameters(){
+        String connection = connectionType.getValue();
+        String ip = ipAddress.getText();
+    }
+}
Index: src/main/resources/org/example/myversion/FXML/SetParameter.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/myversion/FXML/SetParameter.fxml b/src/main/resources/org/example/myversion/FXML/SetParameter.fxml
new file mode 100644
--- /dev/null	(date 1719407557700)
+++ b/src/main/resources/org/example/myversion/FXML/SetParameter.fxml	(date 1719407557700)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+
+
+<AnchorPane prefHeight="400.0" prefWidth="600.0" styleClass="background" stylesheets="@../Style1.css" xmlns="http://javafx.com/javafx/22" xmlns:fx="http://javafx.com/fxml/1" fx:controller="org.example.myversion.FXML.SetParameter">
+   <children>
+      <Label alignment="CENTER" layoutY="20.0" opacity="0.8" prefHeight="40.0" prefWidth="600.0" style="-fx-background-color: black;" text="SET THE PARAMETERS FOR THE GAME" textFill="WHITE" />
+      <TextField fx:id="ipAddress" layoutX="226.0" layoutY="132.0" />
+      <ComboBox fx:id="connectionType" layoutX="225.0" layoutY="250.0" prefWidth="150.0" />
+      <Button fx:id="send" layoutX="275.0" layoutY="326.0" mnemonicParsing="false" text="Send" />
+      <Label layoutX="16.0" layoutY="132.0" prefHeight="25.0" prefWidth="185.0" text="Your IP Address" />
+      <Label layoutX="16.0" layoutY="250.0" prefHeight="25.0" prefWidth="185.0" text="Chose the type of the connection" />
+   </children>
+</AnchorPane>
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <module name=\"MyVersion\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel>\r\n      <module name=\"AM24-IS44\" target=\"21\" />\r\n    </bytecodeTargetLevel>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 2cef93492ca1916d0ba3c7baa153df0ea9422b88)
+++ b/.idea/compiler.xml	(date 1717577383171)
@@ -7,10 +7,8 @@
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
         <module name="MyVersion" />
+        <module name="AM24-IS44" />
       </profile>
     </annotationProcessing>
-    <bytecodeTargetLevel>
-      <module name="AM24-IS44" target="21" />
-    </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
Index: src/main/resources/org/example/myversion/Style2.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/org/example/myversion/Style2.css b/src/main/resources/org/example/myversion/Style2.css
new file mode 100644
--- /dev/null	(date 1719140694171)
+++ b/src/main/resources/org/example/myversion/Style2.css	(date 1719140694171)
@@ -0,0 +1,3 @@
+.background{
+    -fx-background-color: rgba(128, 128, 128, 0.7);
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"openjdk-21\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2cef93492ca1916d0ba3c7baa153df0ea9422b88)
+++ b/.idea/misc.xml	(date 1717577383182)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="MavenProjectsManager">
@@ -6,6 +7,7 @@
         <option value="$PROJECT_DIR$/pom.xml" />
       </list>
     </option>
+    <option name="workspaceImportForciblyTurnedOn" value="true" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: src/test/java/org/example/myversion/server/model/GameTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.myversion.server.model;\r\n\r\nimport org.example.myversion.server.model.decks.cards.Corner;\r\nimport org.example.myversion.server.model.decks.cards.ObjectiveCard;\r\nimport org.example.myversion.server.model.decks.cards.StarterCard;\r\nimport org.example.myversion.server.model.enumerations.CornerContent;\r\nimport org.example.myversion.server.model.enumerations.CornerPosition;\r\nimport org.example.myversion.server.model.enumerations.Resource;\r\nimport org.example.myversion.server.model.enumerations.SpecialObject;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass GameTest {\r\n    private Player player1;\r\n    private Player player2;\r\n\r\n    private Player player3;\r\n    private Game game;\r\n    private Board board;\r\n    private StarterCard SC_002;\r\n    private StarterCard SC_003;\r\n    private StarterCard SC_004;\r\n\r\n\r\n\r\n    private List<Player> players;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        player1 = new Player(\"Pippo\");\r\n        player2 = new Player(\"Pluto\");\r\n        player3 = new Player(\"Minnie\");\r\n\r\n        game = new Game();\r\n        board = new Board();\r\n        players = new ArrayList<>();\r\n        /*\r\n        SC_002 = new StarterCard(\r\n                // Resources of the card\r\n                new Resource[]{Resource.FUNGI_KINGDOM},\r\n                // Corners of the card\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(Resource.ANIMAL_KINGDOM),\r\n                        CornerPosition.UP_RIGHT, new Corner(null),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(null),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(Resource.FUNGI_KINGDOM)\r\n                ),\r\n                // Back corners of the card\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(Resource.PLANT_KINGDOM),\r\n                        CornerPosition.UP_RIGHT, new Corner(Resource.ANIMAL_KINGDOM),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(Resource.FUNGI_KINGDOM),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(Resource.INSECT_KINGDOM)\r\n                )\r\n        );\r\n\r\n        SC_003 = new StarterCard(\r\n                new Resource[]{Resource.PLANT_KINGDOM, Resource.FUNGI_KINGDOM},\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(null),\r\n                        CornerPosition.UP_RIGHT, new Corner(null),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(null),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(null)\r\n                ),\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(Resource.INSECT_KINGDOM),\r\n                        CornerPosition.UP_RIGHT, new Corner(Resource.ANIMAL_KINGDOM),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(Resource.FUNGI_KINGDOM),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(Resource.PLANT_KINGDOM)\r\n                )\r\n        );\r\n\r\n        SC_004 = new StarterCard(\r\n                new Resource[]{Resource.ANIMAL_KINGDOM, Resource.INSECT_KINGDOM},\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(null),\r\n                        CornerPosition.UP_RIGHT, new Corner(null),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(null),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(null)\r\n                ),\r\n                Map.of(\r\n                        CornerPosition.UP_LEFT, new Corner(Resource.PLANT_KINGDOM),\r\n                        CornerPosition.UP_RIGHT, new Corner(Resource.INSECT_KINGDOM),\r\n                        CornerPosition.BOTTOM_LEFT, new Corner(Resource.ANIMAL_KINGDOM),\r\n                        CornerPosition.BOTTOM_RIGHT, new Corner(Resource.FUNGI_KINGDOM)\r\n                )\r\n        );*/\r\n    }\r\n\r\n    @Test\r\n    void newPlayer() {\r\n        // Check if the players list is initially empty\r\n        assertEquals(0, game.getPlayers().size());\r\n\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n\r\n        // Check if the players list contains the correct number of players\r\n        assertEquals(3, game.getPlayers().size());\r\n        //assertEquals(player1, game.getPlayers().getFirst());\r\n\r\n        // Check if the players added are the expected ones\r\n        assertEquals(\"Pippo\", game.getPlayers().get(0).getNickname());\r\n        assertEquals(\"Pluto\", game.getPlayers().get(1).getNickname());\r\n        assertEquals(\"Minnie\", game.getPlayers().get(2).getNickname());\r\n\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void getPlayers() {\r\n        // Check if the players list is initially empty\r\n        assertEquals(0, game.getPlayers().size());\r\n\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Retrieve the list of players\r\n        List<Player> players = game.getPlayers();\r\n\r\n        // Check if the players list contains the correct number of players\r\n        assertEquals(3, players.size());\r\n\r\n        // Check if the players added are the expected ones\r\n        assertEquals(\"Pippo\", players.get(0).getNickname());\r\n        assertEquals(\"Pluto\", players.get(1).getNickname());\r\n        assertEquals(\"Minnie\", players.get(2).getNickname());\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    void getCurrentPlayer() {\r\n        // Verifica che non ci sia un giocatore corrente all'inizio\r\n        assertNull(game.getCurrentPlayer());\r\n\r\n        // Aggiungi giocatori\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Verifica che il primo giocatore aggiunto sia il giocatore corrente\r\n        assertEquals(\"Pippo\", game.getCurrentPlayer().getNickname());\r\n\r\n        game.updateCurrentPlayer();\r\n        assertEquals(\"Pluto\", game.getCurrentPlayer().getNickname());\r\n\r\n        game.updateCurrentPlayer();\r\n        assertEquals(\"Minnie\", game.getCurrentPlayer().getNickname());\r\n\r\n    }\r\n\r\n    @Test\r\n    void placeStarterCard() { //verifico che la carta venga piazzata o anche i punti??\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        player1 = game.getPlayers().get(0);\r\n        player2 = game.getPlayers().get(1);\r\n        player3 = game.getPlayers().get(2);\r\n\r\n        // Place the starter card for each player\r\n        game.placeStarterCard(player1, SC_002);\r\n        game.placeStarterCard(player2, SC_003);\r\n        game.placeStarterCard(player3, SC_004);\r\n\r\n\r\n\r\n        // Check if the starter card is placed correctly for each player\r\n        assertEquals(SC_002, player1.getPlayArea()[41][41]);\r\n        assertEquals(SC_003, player2.getPlayArea()[41][41]);\r\n        assertEquals(SC_004, player3.getPlayArea()[41][41]);\r\n\r\n    }\r\n\r\n    @Test\r\n    void drawSecretObjectives() {\r\n        // Draw secret objective cards for the player\r\n        List<ObjectiveCard> secretObjectives = game.drawSecretObjectives();\r\n\r\n        // Check that two secret objective cards have been drawn\r\n        assertEquals(2, secretObjectives.size());\r\n    }\r\n\r\n    @Test\r\n    void setPlayerSecretObjective() {\r\n        // Add a player\r\n        game.newPlayer(\"Pippo\");\r\n\r\n        // Draw a secret objective card\r\n        List<ObjectiveCard> secretObjectives = game.drawSecretObjectives();\r\n        ObjectiveCard objectiveCard = secretObjectives.get(0);\r\n\r\n        // Set the secret objective card for the player\r\n        game.setPlayerSecretObjective(game.getPlayers().get(0), objectiveCard);\r\n\r\n        // Verify that the player has the correct secret objective card\r\n        assertEquals(objectiveCard, game.getPlayers().get(0).getSecretObjective());\r\n    }\r\n\r\n\r\n    @Test\r\n    void getCommonObjectives() {\r\n        // Check that there are two initial common objective cards\r\n        assertEquals(2, game.getCommonObjectives().size());\r\n    }\r\n\r\n    @Test\r\n    void playCard() {\r\n    }\r\n\r\n    @Test\r\n    void drawCard() {\r\n    }\r\n\r\n    @Test\r\n    void updateCurrentPlayer() {\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Assicurati che i giocatori siano inizializzati correttamente nel gioco\r\n        assertNotNull(game.getPlayers());\r\n        assertFalse(game.getPlayers().isEmpty());\r\n\r\n\r\n        // Verifica che il currentPlayer sia inizialmente player1\r\n        assertEquals(\"Pippo\", game.getCurrentPlayer().getNickname());\r\n\r\n        // Chiama il metodo updateCurrentPlayer() per avanzare al prossimo giocatore\r\n        game.updateCurrentPlayer();\r\n\r\n        // Verifica che il currentPlayer sia ora player2\r\n        assertEquals(\"Pluto\", game.getCurrentPlayer().getNickname());\r\n\r\n        game.updateCurrentPlayer();\r\n        assertEquals(\"Minnie\", game.getCurrentPlayer().getNickname());\r\n\r\n        game.updateCurrentPlayer();\r\n        assertEquals(\"Pippo\", game.getCurrentPlayer().getNickname());\r\n\r\n    }\r\n\r\n    @Test\r\n    void isLastTurn() {\r\n        // Initially, the last turn should be false\r\n        assertFalse(game.isLastTurn());\r\n\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Check if the last turn remains false after adding players\r\n        assertFalse(game.isLastTurn());\r\n\r\n        // Simulate the last turn condition\r\n        game.updateCurrentPlayer(); // Move to the next player\r\n        game.updateCurrentPlayer(); // Move to the next player again (last player in the list)\r\n        assertFalse(game.isLastTurn());\r\n\r\n        // Move to the next player (the first player in the list)\r\n        game.updateCurrentPlayer();\r\n        assertFalse(game.isLastTurn()); // Should be false again\r\n    }\r\n\r\n    @Test\r\n    void changePlayerConnectionStatus() {\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Retrieve the players\r\n        List<Player> players = game.getPlayers();\r\n\r\n        // Change the connection status of player1 to true\r\n        game.changePlayerConnectionStatus(player1, true);\r\n\r\n        // Check if the connection status of player1 is updated correctly\r\n        assertTrue(player1.isConnected());\r\n\r\n        // Change the connection status of player2 to false\r\n        game.changePlayerConnectionStatus(player2, false);\r\n\r\n        // Check if the connection status of player2 is updated correctly\r\n        assertFalse(player2.isConnected());\r\n\r\n        // Change the connection status of player3 to true\r\n        game.changePlayerConnectionStatus(player3, true);\r\n\r\n        // Check if the connection status of player3 is updated correctly\r\n        assertTrue(player3.isConnected());\r\n    }\r\n\r\n    @Test\r\n    void winner() {\r\n        // Add players\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n\r\n        // Assicurati che ci siano giocatori nel gioco\r\n        List<Player> players = game.getPlayers();\r\n        assertNotNull(players);\r\n        assertFalse(players.isEmpty());\r\n\r\n        // Assicurati che i punteggi dei giocatori siano inizializzati correttamente\r\n        for (Player player : players) {\r\n            assertNotNull(game.getBoard().getScore(player));\r\n            assertEquals(0, game.getBoard().getScore(player).intValue());\r\n        }\r\n\r\n        // Aggiungi punteggi ai giocatori\r\n        game.getBoard().updateScore(players.get(0), 10); // Player1\r\n        game.getBoard().updateScore(players.get(1), 15); // Player2\r\n        game.getBoard().updateScore(players.get(2), 20); // Player3\r\n\r\n        // Verifica che il giocatore con il punteggio più alto sia corretto\r\n        Player winner = game.winner();\r\n        assertNotNull(winner);\r\n        assertEquals(\"Minnie\", winner.getNickname());\r\n\r\n    }\r\n    @Test\r\n    void noWinner() {\r\n        // Aggiungi giocatori\r\n        game.newPlayer(\"Pippo\");\r\n        game.newPlayer(\"Pluto\");\r\n        game.newPlayer(\"Minnie\");\r\n\r\n        // Assicurati che ci siano giocatori nel gioco\r\n        List<Player> players = game.getPlayers();\r\n        assertNotNull(players);\r\n        assertFalse(players.isEmpty());\r\n\r\n        // Imposta il punteggio per tutti i giocatori allo stesso valore\r\n        int sameScore = 10; // Puoi scegliere qualsiasi valore\r\n        for (Player player : players) {\r\n            game.getBoard().updateScore(player, sameScore);\r\n        }\r\n\r\n        // Verifica che non ci sia un vincitore\r\n        assertNull(game.winner());\r\n    }\r\n\r\n    @Test\r\n    void initializeGame() {\r\n        assertTrue(game.getCommonObjectives().isEmpty());\r\n        assertTrue(game.getVisibleResourceCards().isEmpty());\r\n        assertTrue(game.getVisibleGoldCards().isEmpty());\r\n\r\n        // Initialize the game\r\n        game.initializeGame();\r\n\r\n        // Verify that the game has been initialized\r\n        for (Player player : game.getPlayers()) {\r\n            assertEquals(0, game.getBoard().getScore(player));\r\n        }\r\n\r\n        // Verify that the round map is properly initialized\r\n        for (Player player : game.getPlayers()) {\r\n            assertEquals(0, game.getBoard().getScore(player));\r\n        }\r\n\r\n        // Assert that the lists have been populated\r\n        assertEquals(2, game.getCommonObjectives().size());\r\n        assertEquals(2, game.getVisibleGoldCards().size());\r\n        assertEquals(2, game.getVisibleResourceCards().size());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/myversion/server/model/GameTest.java b/src/test/java/org/example/myversion/server/model/GameTest.java
--- a/src/test/java/org/example/myversion/server/model/GameTest.java	(revision 2cef93492ca1916d0ba3c7baa153df0ea9422b88)
+++ b/src/test/java/org/example/myversion/server/model/GameTest.java	(date 1719420902660)
@@ -41,7 +41,7 @@
         game = new Game();
         board = new Board();
         players = new ArrayList<>();
-        /*
+
         SC_002 = new StarterCard(
                 // Resources of the card
                 new Resource[]{Resource.FUNGI_KINGDOM},
@@ -58,7 +58,7 @@
                         CornerPosition.UP_RIGHT, new Corner(Resource.ANIMAL_KINGDOM),
                         CornerPosition.BOTTOM_LEFT, new Corner(Resource.FUNGI_KINGDOM),
                         CornerPosition.BOTTOM_RIGHT, new Corner(Resource.INSECT_KINGDOM)
-                )
+                ), 2
         );
 
         SC_003 = new StarterCard(
@@ -74,7 +74,7 @@
                         CornerPosition.UP_RIGHT, new Corner(Resource.ANIMAL_KINGDOM),
                         CornerPosition.BOTTOM_LEFT, new Corner(Resource.FUNGI_KINGDOM),
                         CornerPosition.BOTTOM_RIGHT, new Corner(Resource.PLANT_KINGDOM)
-                )
+                ), 3
         );
 
         SC_004 = new StarterCard(
@@ -90,8 +90,8 @@
                         CornerPosition.UP_RIGHT, new Corner(Resource.INSECT_KINGDOM),
                         CornerPosition.BOTTOM_LEFT, new Corner(Resource.ANIMAL_KINGDOM),
                         CornerPosition.BOTTOM_RIGHT, new Corner(Resource.FUNGI_KINGDOM)
-                )
-        );*/
+                ), 4
+        );
     }
 
     @Test
@@ -140,6 +140,7 @@
         assertEquals("Minnie", players.get(2).getNickname());
 
 
+
     }
 
     @Test
